def getFile(): #Similar to getFile() in _5_ed_processCorpus.py, but with different label    from tkinter import filedialog as fd    jsonToRead = fd.askopenfilename(title='Locate PROCESSED corpus')    return jsonToReaddef formatStrings(input_text1, input_text2):        def split_string(input_text):        import re        return re.split(r'[,]+', input_text) #r'[ ,/]+' ?            def drop_spaces(input_strings):        return_strings = []        for string in input_strings:            if string.strip() != '':                dropped_string = ' '.join((string.strip()).split())                return_strings.append(dropped_string)        return return_strings                input_text1_form = drop_spaces(split_string(input_text1))    input_text2_form = drop_spaces(split_string(input_text2))    #print(f"Separated input 1: {input_text1_form}")    #print(f"Separated input 2: {input_text2_form}")        return input_text1_form, input_text2_formdef maxPhrase(input_text1_form, input_text2_form): #Determining the maximum phrase size (2 words or 3 words or 4...). To be used inside getInd()        import re    import numpy as np    def phrase_detector(input_strings):        return_ind = []        for i in range(len(input_strings)):            if ' ' in input_strings[i]:                return_ind.append(i)        return return_ind        phrase_ind1 = phrase_detector(input_text1_form)    phrase_ind2 = phrase_detector(input_text2_form)        phrases1 = [input_text1_form[ind] for ind in phrase_ind1]    phrases2 = [input_text2_form[ind] for ind in phrase_ind2]        phrases = phrases1 + phrases2    no_words_in_phrases = []    for phrase in phrases:        no_words_in_phrases.append(len(re.split(r'[ ]+', phrase))) #phrases[0]???    if no_words_in_phrases != []:        largest_n = np.max(no_words_in_phrases)    else:        largest_n = 0        return phrases1, phrases2, largest_ndef getInd(data, input_text1_form, input_text2_form): #Get indices of words to remove and to keep        n_docs = len(data)    phrases1, phrases2, largest_n = maxPhrase(input_text1_form, input_text2_form)    remove_ind = [[] for _ in range(n_docs)]    keep_ind = [[] for _ in range(n_docs)]    for i in range(n_docs):                curr_doc = data[i] #Current document        n_words = len(curr_doc)                for j in range(n_words):                        #Word            curr_word = curr_doc[j] #Current word            #print(curr_word)                        if curr_word in input_text1_form:                remove_ind[i].append(j)                if curr_word in input_text2_form:                    keep_ind[i].append(j)                                #Phrase            curr_sequence = ''            for n in range(1, largest_n):                curr_sequence = " ".join(curr_doc[j:(j+n+1)])                #print(curr_sequence)                                if curr_sequence in phrases1:                    for k in range(j, j+n+1):                        remove_ind[i].append(k)                if curr_sequence in phrases2:                    for k in range(j, j+n+1):                        keep_ind[i].append(k)        return remove_ind, keep_inddef applyInd(data, remove_ind, keep_ind): #Apply indices of words to remove and to keep    import copy        n_docs = len(data)    data_final = copy.deepcopy(data)    for i in range(n_docs):        remove_ind[i].sort(reverse=True)        for ind in remove_ind[i]:            if ind not in keep_ind[i]:                del data_final[i][ind]    return data_finaldef saveReducedText(data_final): #Similar to saveProcessText() in processCorpus.py, but with different label    from tkinter import filedialog as fd    import json    directoryPath = fd.askdirectory(title='Select directory to write selected corpus to')    import makeList    slash = makeList.getSlash(directoryPath)    outFile = open(directoryPath + slash + 'reducedCorpus.json','w')    json.dump(data_final, outFile)    return(data_final)def runRemove():        import processCorpus    jsonToRead = getFile()    data = processCorpus.readJson(jsonToRead)        import removeWordsGUI    input_text1, input_text2 = removeWordsGUI.getPhrases()    input_text1_form, input_text2_form = formatStrings(input_text1, input_text2)    remove_ind, keep_ind = getInd(data, input_text1_form, input_text2_form)        data_final = applyInd(data, remove_ind, keep_ind)        #print(data_final)    saveReducedText(data_final)    print("saved reduced text")        return data_final